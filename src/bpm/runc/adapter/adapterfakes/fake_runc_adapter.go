// Code generated by counterfeiter. DO NOT EDIT.
package adapterfakes

import (
	"bpm/config"
	"bpm/runc/adapter"
	"os"
	"sync"

	specs "github.com/opencontainers/runtime-spec/specs-go"
)

type FakeRuncAdapter struct {
	CreateJobPrerequisitesStub        func(systemRoot, jobName string, cfg *config.BpmConfig, user specs.User) (string, *os.File, *os.File, error)
	createJobPrerequisitesMutex       sync.RWMutex
	createJobPrerequisitesArgsForCall []struct {
		systemRoot string
		jobName    string
		cfg        *config.BpmConfig
		user       specs.User
	}
	createJobPrerequisitesReturns struct {
		result1 string
		result2 *os.File
		result3 *os.File
		result4 error
	}
	createJobPrerequisitesReturnsOnCall map[int]struct {
		result1 string
		result2 *os.File
		result3 *os.File
		result4 error
	}
	BuildSpecStub        func(systemRoot, jobName string, cfg *config.BpmConfig, user specs.User) (specs.Spec, error)
	buildSpecMutex       sync.RWMutex
	buildSpecArgsForCall []struct {
		systemRoot string
		jobName    string
		cfg        *config.BpmConfig
		user       specs.User
	}
	buildSpecReturns struct {
		result1 specs.Spec
		result2 error
	}
	buildSpecReturnsOnCall map[int]struct {
		result1 specs.Spec
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRuncAdapter) CreateJobPrerequisites(systemRoot string, jobName string, cfg *config.BpmConfig, user specs.User) (string, *os.File, *os.File, error) {
	fake.createJobPrerequisitesMutex.Lock()
	ret, specificReturn := fake.createJobPrerequisitesReturnsOnCall[len(fake.createJobPrerequisitesArgsForCall)]
	fake.createJobPrerequisitesArgsForCall = append(fake.createJobPrerequisitesArgsForCall, struct {
		systemRoot string
		jobName    string
		cfg        *config.BpmConfig
		user       specs.User
	}{systemRoot, jobName, cfg, user})
	fake.recordInvocation("CreateJobPrerequisites", []interface{}{systemRoot, jobName, cfg, user})
	fake.createJobPrerequisitesMutex.Unlock()
	if fake.CreateJobPrerequisitesStub != nil {
		return fake.CreateJobPrerequisitesStub(systemRoot, jobName, cfg, user)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.createJobPrerequisitesReturns.result1, fake.createJobPrerequisitesReturns.result2, fake.createJobPrerequisitesReturns.result3, fake.createJobPrerequisitesReturns.result4
}

func (fake *FakeRuncAdapter) CreateJobPrerequisitesCallCount() int {
	fake.createJobPrerequisitesMutex.RLock()
	defer fake.createJobPrerequisitesMutex.RUnlock()
	return len(fake.createJobPrerequisitesArgsForCall)
}

func (fake *FakeRuncAdapter) CreateJobPrerequisitesArgsForCall(i int) (string, string, *config.BpmConfig, specs.User) {
	fake.createJobPrerequisitesMutex.RLock()
	defer fake.createJobPrerequisitesMutex.RUnlock()
	return fake.createJobPrerequisitesArgsForCall[i].systemRoot, fake.createJobPrerequisitesArgsForCall[i].jobName, fake.createJobPrerequisitesArgsForCall[i].cfg, fake.createJobPrerequisitesArgsForCall[i].user
}

func (fake *FakeRuncAdapter) CreateJobPrerequisitesReturns(result1 string, result2 *os.File, result3 *os.File, result4 error) {
	fake.CreateJobPrerequisitesStub = nil
	fake.createJobPrerequisitesReturns = struct {
		result1 string
		result2 *os.File
		result3 *os.File
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeRuncAdapter) CreateJobPrerequisitesReturnsOnCall(i int, result1 string, result2 *os.File, result3 *os.File, result4 error) {
	fake.CreateJobPrerequisitesStub = nil
	if fake.createJobPrerequisitesReturnsOnCall == nil {
		fake.createJobPrerequisitesReturnsOnCall = make(map[int]struct {
			result1 string
			result2 *os.File
			result3 *os.File
			result4 error
		})
	}
	fake.createJobPrerequisitesReturnsOnCall[i] = struct {
		result1 string
		result2 *os.File
		result3 *os.File
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeRuncAdapter) BuildSpec(systemRoot string, jobName string, cfg *config.BpmConfig, user specs.User) (specs.Spec, error) {
	fake.buildSpecMutex.Lock()
	ret, specificReturn := fake.buildSpecReturnsOnCall[len(fake.buildSpecArgsForCall)]
	fake.buildSpecArgsForCall = append(fake.buildSpecArgsForCall, struct {
		systemRoot string
		jobName    string
		cfg        *config.BpmConfig
		user       specs.User
	}{systemRoot, jobName, cfg, user})
	fake.recordInvocation("BuildSpec", []interface{}{systemRoot, jobName, cfg, user})
	fake.buildSpecMutex.Unlock()
	if fake.BuildSpecStub != nil {
		return fake.BuildSpecStub(systemRoot, jobName, cfg, user)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.buildSpecReturns.result1, fake.buildSpecReturns.result2
}

func (fake *FakeRuncAdapter) BuildSpecCallCount() int {
	fake.buildSpecMutex.RLock()
	defer fake.buildSpecMutex.RUnlock()
	return len(fake.buildSpecArgsForCall)
}

func (fake *FakeRuncAdapter) BuildSpecArgsForCall(i int) (string, string, *config.BpmConfig, specs.User) {
	fake.buildSpecMutex.RLock()
	defer fake.buildSpecMutex.RUnlock()
	return fake.buildSpecArgsForCall[i].systemRoot, fake.buildSpecArgsForCall[i].jobName, fake.buildSpecArgsForCall[i].cfg, fake.buildSpecArgsForCall[i].user
}

func (fake *FakeRuncAdapter) BuildSpecReturns(result1 specs.Spec, result2 error) {
	fake.BuildSpecStub = nil
	fake.buildSpecReturns = struct {
		result1 specs.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeRuncAdapter) BuildSpecReturnsOnCall(i int, result1 specs.Spec, result2 error) {
	fake.BuildSpecStub = nil
	if fake.buildSpecReturnsOnCall == nil {
		fake.buildSpecReturnsOnCall = make(map[int]struct {
			result1 specs.Spec
			result2 error
		})
	}
	fake.buildSpecReturnsOnCall[i] = struct {
		result1 specs.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeRuncAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createJobPrerequisitesMutex.RLock()
	defer fake.createJobPrerequisitesMutex.RUnlock()
	fake.buildSpecMutex.RLock()
	defer fake.buildSpecMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRuncAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapter.RuncAdapter = new(FakeRuncAdapter)
